#include "Loom_Stepper.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////
Loom_Stepper::Loom_Stepper(Manager& man, int instance_num) : Actuator(ACTUATOR_TYPE::STEPPER, instance_num), manInst(&man), instance(instance_num) {
    manInst->registerModule(this);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
Loom_Stepper::Loom_Stepper(int instance_num) : Actuator(ACTUATOR_TYPE::STEPPER, instance_num), instance(instance_num) {}
//////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
Loom_Stepper::~Loom_Stepper(){
    delete AFMS;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Loom_Stepper::initialize(){

    // Get references to each motor
    AFMS = new Adafruit_MotorShield();
    motor = AFMS->getStepper(200, instance+1);

    // Start the motor controller
    AFMS->begin();

    // Wait for init move
    yield();

    printModuleName(); Serial.println("Stepper Initialized!");
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Loom_Stepper::package(JsonObject json) {
    json["Position"] = currentSteps;
    json["RPM"] = rpm;
    json["Direction"] = (clockwise ? "Clockwise" : "Counterclockwise");
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Loom_Stepper::control(JsonArray json){
    moveSteps(json[1].as<uint16_t>(), json[2].as<uint8_t>(), json[3].as<bool>());
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Loom_Stepper::moveSteps(const uint16_t steps, const uint8_t speed, const bool clockwise){

    // Tracks the current state of the motor
    if(clockwise)
        currentSteps += steps;
    else
        currentSteps -= steps;
    
    rpm = speed;
    this->clockwise = clockwise;

    motor->setSpeed(speed);
    motor->step(steps, (clockwise) ? FORWARD : BACKWARD, SINGLE);

    // Wait for move to finish
    yield();

    printModuleName(); 
    Serial.print("Stepper set to move " + String(steps));
    Serial.print(" steps at speed " + String(speed));
    Serial.print(" going ");
    Serial.println((clockwise) ? "clockwise" : "counterclockwise"));
}
//////////////////////////////////////////////////////////////////////////////////////////////////////