#include <Wire.h>

#include "Module.h"
#include "Loom_Manager.h"
#include "Loom_Hypnos.h"

#define COUNTER_ADDRESS 0x32

/**
 * Class used to handle keeping track of tips generated by a low-power I2C counter or interrupts
 * 
 * @author Will Richards
 */
class Loom_TippingBucket : public Module{
    protected:
        void power_up() override {};
        void power_down() override {}; 

        void initialize() override;  
        void package() override;   
        void measure() override;          
    public:

        /* Constructor for an I2C based tipping bucket*/
        Loom_TippingBucket(Manager& man);

        /**
         * Constructor for an interrupt based tipping bucket, WIP
         * 
         * @param pin Which pin to detect interrupts on 
        */
        Loom_TippingBucket(Manager& man, int pin);

        /* Set an instance of the Hypnos inside the tipping bucket class so we can read RTC data*/
        void setHypnosInstance(Loom_Hypnos& hypnos) { this->hypnosInst = &hypnos; };
    private:
        Manager* manInst = nullptr;                     // Instance of the manager
        int interruptPin = -1;                          // If using interrupts the pin that we should be interrupting on
        unsigned long tipCount = 0;                     // The number of tips accumulated by the counter

        /* Hourly Tips Tracker*/
        Loom_Hypnos* hypnosInst = nullptr;              // Instance of the hypnos for using RTC
        DateTime lastHourDT;                            // Variable to store the last date time that we are basing our start hour off
        unsigned long hourTips = 0;
};